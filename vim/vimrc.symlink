"" Initialization
set nocompatible
set encoding=utf-8

runtime macros/matchit.vim

filetype off                   " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'VundleVim/Vundle.vim'

" My Bundles here:
"
" original repos on github
Plugin 'majutsushi/tagbar.git'
Plugin 'tpope/vim-dispatch.git'
Plugin 'tpope/vim-unimpaired.git'
Plugin 'tpope/vim-abolish.git'
Plugin 'tpope/vim-repeat.git'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-bundler.git'
" Plugin 'tpope/vim-rails.git'
Plugin 'tpope/vim-commentary.git'
Plugin 'tpope/vim-endwise.git'
Plugin 'tpope/vim-surround.git'
Plugin 'tpope/vim-rake.git'
Plugin 'mileszs/ack.vim.git'
Plugin 'ervandew/supertab.git'
Plugin 'leafgarland/typescript-vim.git'
Plugin 'pangloss/vim-javascript.git'
Plugin 'cespare/vim-toml'
Plugin 'scrooloose/syntastic.git'
Plugin 'janko-m/vim-test'
Plugin 'vim-ruby/vim-ruby.git'
Plugin 'keith/rspec.vim'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'kien/ctrlp.vim.git'
Plugin 'Quramy/tsuquyomi'
Plugin 'JamshedVesuna/vim-markdown-preview'
Plugin 'shepherdwind/vim-velocity'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'fatih/vim-go.git'
Plugin 'udalov/kotlin-vim.git'
Plugin 'AndrewRadev/splitjoin.vim'
" vim-scripts repos

call vundle#end()

filetype plugin indent on       " load file type plugins + indentation

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TEST SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let test#javascript#karma#file_pattern = '.spec\.ts'
let test#javascript#karma#executable = 'npm run test:nonverbose'
nmap <silent> <C-S>s :TestSuite<CR>
nmap <silent> <C-S>t :TestNearest<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ANGULAR SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:angular_source_directory = 'src/app'
let g:angular_test_directory = 'test/app'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TYPESCRIPT SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:typescript_compiler_binary = 'tsc'
let g:typescript_compiler_options = ''
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"        Jenkins Settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au BufReadPost Jenkinsfile set syntax=groovy
au BufReadPost Jenkinsfile set filetype=groovy

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"        Go Settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:go_fmt_command = "goimports"
let g:go_metalinter_autosave = 0
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_auto_sameids = 1
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" DISPLAY SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

syntax enable

set background=dark
colorscheme PaperColor

set showcmd     " display incomplete commands
set number      " line numbers
set cursorline  " highlight the line of the cursor
set scrolloff=3 " have some context around the current line always on screen

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BUFFER AND FILE SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" remap markdown preview hotkey
let vim_markdown_preview_hotkey='<C-m>'

" disable ctrlp feature of jumping to file already open in other window
let g:ctrlp_switch_buffer = 0
let g:ctrlp_max_files = 0
" Ignore some folders and files for CtrlP indexing
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.yardoc\|node_modules\|log\|tmp$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$'
  \ }

" No backups and swapfiles needed when using versioning
set nobackup
set noswapfile
set autowrite

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" Auto-reload buffers when file changed on disk
set autoread

" Clipboard
set clipboard=unnamed

"" Whitespace and Files
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode
set autoindent

set list
set listchars=""                  " Reset the listchars
set listchars=nbsp:¬
set listchars+=tab:>-
set listchars+=extends:»
set listchars+=precedes:«
set listchars+=trail:•

set diffopt+=vertical

"" HTML Indentation
" This must be loaded manually since vim doesn't seem to
" autoload the file. Need to investigate that...
source ~/.vim/indent/html.vim
hi def link jsObjectKey Label
"" Cursorline
hi CursorLine cterm=NONE term=NONE
let g:syntastic_go_checkers = ['go', 'golint', 'govet', 'errcheck']
let g:syntastic_typescript_checkers = ['tslint'] 
let g:syntastic_check_on_open = 1
let g:syntastic_enable_signs = 1    " Put errors on left side
" let g:syntastic_quiet_warnings = 1  " Only errors, not warnings please
let g:syntastic_auto_loc_list = 2   " Only show errors when I ask
let g:syntastic_disabled_filetypes = ['html', 'js']
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_no_include_search = 1
let g:syntastic_ruby_exec = '~/.rbenv/shims/ruby' " take the current ruby version specified by rbenv
if has('unix')
  let g:syntastic_error_symbol = '★'
  let g:syntastic_style_error_symbol = '>'
  let g:syntastic_warning_symbol = '⚠'
  let g:syntastic_style_warning_symbol = '>'
else
  let g:syntastic_error_symbol = '!'
  let g:syntastic_style_error_symbol = '>'
  let g:syntastic_warning_symbol = '.'
  let g:syntastic_style_warning_symbol = '>'
endif

"" Mouse only in normal
set mouse=n

au BufRead,BufNewFile *.jbuilder setf ruby
if has("autocmd")
  autocmd User fugitive
        \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
        \   nnoremap <buffer> .. :edit %:h<CR> |
        \ endif

  " Remember last location in file, but not for commit messages.
  " see :help last-position-jump
  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g`\"" | endif

  au BufRead,BufNewFile *.html source ~/.vim/indent/html_grb.vim
endif

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter
nnoremap <cr><cr> :nohlsearch<cr>  " clear search on return

"" Easily Switch Windows
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

set ttimeoutlen=50

highlight Normal cterm=none ctermfg=229 ctermbg=232
highlight ColorColumn ctermbg=233
let &colorcolumn=join(range(81,82),",") " Highlight line 81

"" Status- and Powerline
if has("statusline") && !&cp
  set laststatus=2  " always show the status bar
  set statusline=%<%F\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)%{fugitive#statusline()}
endif

nmap tt <c-]>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SEARCH IN VMODE FOR MARKED WORDS
" Search for selected text, forwards or backwards.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap <silent> * :<C-U>
      \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
      \gvy/<C-R><C-R>=substitute(
      \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
      \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
      \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
      \gvy?<C-R><C-R>=substitute(
      \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
      \gV:call setreg('"', old_reg, old_regtype)<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Formating JSON
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! FormatJSON()
  if (&ft=='json')
    execute "%!python -m json.tool"
  endif
endfunction

command! FormatJSON call FormatJSON()

nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv

inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>
inoremap jj <c-c>
inoremap  <up>     <nop>
inoremap  <down>   <nop>
inoremap  <left>   <nop>
inoremap  <right>  <nop>
let g:ackprg = 'ag --nogroup --nocolor --column'

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
