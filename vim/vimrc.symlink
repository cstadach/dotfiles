"" Initialization
set nocompatible
set encoding=utf-8

runtime macros/matchit.vim

filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" My Bundles here:
"
" original repos on github
" Bundle 'wikitopian/hardmode'
Bundle 'scrooloose/syntastic.git'
Bundle 'tpope/vim-unimpaired.git'
Bundle 'tpope/vim-abolish.git'
Bundle 'tpope/vim-repeat.git'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-bundler.git'
Bundle 'tpope/vim-rails.git'
Bundle 'tpope/vim-commentary.git'
Bundle 'tpope/vim-endwise.git'
Bundle 'tpope/vim-surround.git'
Bundle 'tpope/vim-rake.git'
Bundle 'mileszs/ack.vim.git'
Bundle 'ervandew/supertab.git'
Bundle 'pangloss/vim-javascript.git'
Bundle 'hail2u/vim-css3-syntax.git'
Bundle 'vim-ruby/vim-ruby.git'
Bundle 'altercation/vim-colors-solarized.git'
Bundle 'kien/ctrlp.vim.git'
" vim-scripts repos

filetype plugin indent on       " load file type plugins + indentation


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" DISPLAY SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

syntax enable

if has('gui-running')
  set background=light
else
  set background=dark
endif

if has('mac')
  :let g:solarized_termcolors=256
  :colorscheme solarized
elseif has('unix')
  set t_Co=16
  let g:solarized_termcolors=&t_Co
  let g:solarized_termtrans=1
  colorscheme solarized
endif

set showcmd      " display incomplete commands
set number      " line numbers
set cursorline  " highlight the line of the cursor
set scrolloff=3 " have some context around the current line always on screen

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BUFFER AND FILE SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" disable ctrlp feature of jumping to file already open in other window
let g:ctrlp_switch_buffer = '0'

" No backups and swapfiles needed when using versioning
set nobackup
set noswapfile

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" Auto-reload buffers when file changed on disk
set autoread

" Clipboard
set clipboard=unnamed

"" Whitespace and Files
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode
set autoindent

set list
set listchars=""                  " Reset the listchars
set listchars=nbsp:¬
set listchars+=tab:>-
set listchars+=extends:»
set listchars+=precedes:«
set listchars+=trail:•





"" HTML Indentation
" This must be loaded manually since vim doesn't seem to
" autoload the file. Need to investigate that...
source ~/.vim/indent/html.vim
hi def link jsObjectKey Label
"" Cursorline
hi CursorLine cterm=NONE term=NONE
let g:syntastic_check_on_open = 1
let g:syntastic_enable_signs = 1    " Put errors on left side
" let g:syntastic_quiet_warnings = 1  " Only errors, not warnings please
let g:syntastic_quiet_messages = { "level": "errors" }  " Only errors, not warnings please
let g:syntastic_auto_loc_list = 2   " Only show errors when I ask
let g:syntastic_disabled_filetypes = ['html', 'js']
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_no_include_search = 1
let g:syntastic_ruby_exec = '~/.rbenv/shims/ruby' " take the current ruby version specified by rbenv
if has('unix')
  let g:syntastic_error_symbol = '★'
  let g:syntastic_style_error_symbol = '>'
  let g:syntastic_warning_symbol = '⚠'
  let g:syntastic_style_warning_symbol = '>'
else
  let g:syntastic_error_symbol = '!'
  let g:syntastic_style_error_symbol = '>'
  let g:syntastic_warning_symbol = '.'
  let g:syntastic_style_warning_symbol = '>'
endif

"" Mouse
set mouse=a

au BufRead,BufNewFile *.jbuilder setf ruby
if has("autocmd")
  autocmd User fugitive
        \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
        \   nnoremap <buffer> .. :edit %:h<CR> |
        \ endif

  " Treat JSON files like JavaScript
  au BufNewFile,BufRead *.json set ft=javascript

  " Remember last location in file, but not for commit messages.
  " see :help last-position-jump
  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g`\"" | endif

  au BufRead,BufNewFile *.html source ~/.vim/indent/html_grb.vim
endif

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter
nnoremap <cr><cr> :nohlsearch<cr>  " clear search on return

"" Easily Switch Windows
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

set ttimeoutlen=50

"" Status- and Powerline
if has("statusline") && !&cp
  set laststatus=2  " always show the status bar
  set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)
endif

nmap tt <c-]>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SEARCH IN VMODE FOR MARKED WORDS
" Search for selected text, forwards or backwards.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap <silent> * :<C-U>
      \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
      \gvy/<C-R><C-R>=substitute(
      \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
      \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
      \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
      \gvy?<C-R><C-R>=substitute(
      \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
      \gV:call setreg('"', old_reg, old_regtype)<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>
inoremap jj <c-c>
inoremap rld Rails.logger.debug
inoremap <esc> <nop>
inoremap <up>    :echoerr 'USE K TO GO UP!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'<CR>
inoremap <down>  :echoerr 'USE J TO GO DOWN!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'<CR>
inoremap <left>  :echoerr 'USE WORDWISE MOVEMENTS OR SEARCH!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'<CR>
inoremap <right>  :echoerr 'USE WORDWISE MOVEMENTS OR SEARCH!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'<CR>
noremap <up>    :echoerr 'USE K TO GO UP!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'<CR>
noremap <down>  :echoerr 'USE J TO GO DOWN!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'<CR>
" noremap h  :echoerr 'USE WORDWISE MOVEMENTS OR SEARCH!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'<CR>
" noremap l  :echoerr 'USE WORDWISE MOVEMENTS OR SEARCH!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'<CR>
noremap <left>  :echoerr 'USE WORDWISE MOVEMENTS OR SEARCH!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'<CR>
noremap <right>  :echoerr 'USE WORDWISE MOVEMENTS OR SEARCH!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'<CR>
nmap <leader>gs :Gstatus<CR><C-w>20+
